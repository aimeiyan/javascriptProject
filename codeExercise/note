1、下面程序输出是100，为什么不是a函数，是因为a函数中并没有定义a或者对a变量进行修改，即使定义a或者对a进行修改，那也只是在a函数内部，而输出是在函数外部？

 /**
     * 变量、函数、作用域
     * @type {number}
     */

    var a = 100;
    function a() {
        console.log(i, '---');
        for (var i = 0; i < 10; i++) {
            console.log(i, '+++++')
        }

    }

    console.log(a, '#######');

2、为什么是下面的规则 ？

function compare(a, b) {
  if (a > b) return 1
  else if (a < b) return -1
  else return 0
}

3、严格模式：
http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html

4、typeof and instanceof
(1) typeof 是一个一元运算，放在一个运算数之前，运算数可以是任意类型。它返回值是一个字符串，该字符串说明运算数的类型。typeof 一般只能返回如下几个结果：
number,boolean,string,function,object,undefined。

    可以使用 typeof 来获取一个变量是否存在，如 if(typeof a!="undefined"){alert("ok")}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错，
对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。

(2) instanceof
instanceof 用于判断一个变量是否某个对象的实例
a instanceof b ? alert("true"):alert("false"); //a是b的实例？真:假

测试 var a=new Array();if (a instanceof Object) alert('Y');else alert('N');
    var a=new Array();alert(a instanceof Array);

5、isArray() 兼容性
在以下文档模式中受支持：Internet Explorer 9 标准模式、Internet Explorer 10 标准模式和 Internet Explorer 11 标准模式。此外，也在应用商店应用（Windows 8 和 Windows Phone 8.1）中受支持。
在以下文档模式中不受支持：Quirks、Internet Explorer 6 标准模式、Internet Explorer 7 标准模式、Internet Explorer 8 标准模式。

6、JS 中 object.constructor的认识：

Object                          含有所有js对象的特性的超类
--------------------------------------------------------------
Object.constructor              对象的构造函数
--------------------------------------------------------------
Object.hasOwnProperty()         检查属性是否被继承
--------------------------------------------------------------
Object.isPrototypeOf()          一个对象是否是另一个对象的原型
--------------------------------------------------------------
Object.propertyIsEnumerable()   是否可以通过for/in循环看到属性
--------------------------------------------------------------
Object.toLocaleString()         返回对象的本地字符串表示
--------------------------------------------------------------
Object.toString()               定义一个对象的字符串表示
--------------------------------------------------------------
Object.valueOf()                指定对象的原始值

7、prototype
http://www.jb51.net/article/23052.htm
http://www.cnblogs.com/yjf512/archive/2011/06/03/2071914.html
http://www.jb51.net/article/24577.htm


prototype只是函数的一个属性，该属性的类型是一个对象。Javascript中的继承一般都依赖这属性实现。
在Javascript中，一切都是对象，字符串是对象，数组是对象，变量是对象，函数也是对象，所以才会允许['a','b','c'].push('d');这样的操作存在。类本身也是一个对象，也可以定义属性和方法;
prototype就是一个作用于类的属性。默认情况下，所有Javascript类都会有一个prototype属性，但是类实例没有。
在Javascript中，当我们取一个对象中并不存在的属性或是方法时，它会试图查看该对象所对应的类中的prototype属性中是否包含该属性或是方法，而prototype也是一个Javascript对象，若是其中也没有，
该prototype又会访问它对应的类的prototype，如此一级级地向上访问，直到找到需要的属性或方法，或是prototype属性为null。

